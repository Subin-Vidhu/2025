{
  "name": "Simple JQL Tester - Fixed",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Test JQL Formats",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [0, 0]
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 20,
        "jql": "assignee = currentUser() ORDER BY updated DESC",
        "options": {}
      },
      "id": "test-current-user",
      "name": "Test: currentUser()",
      "type": "n8n-nodes-base.jira",
      "typeVersion": 1,
      "position": [200, 0],
      "credentials": {
        "jiraSoftwareCloudApi": {
          "id": "pgUQDXug0CqSuSyX",
          "name": "Jira SW Cloud account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Simple JQL analysis\nconst allTasks = $input.all().map(item => item.json);\n\nif (allTasks.length === 0) {\n  return {\n    json: {\n      message: `❌ NO TASKS FOUND\\n\\nThe credential might be linked to the wrong account or you have no assigned tasks.\\n\\nTroubleshooting:\\n1. Check if you have tasks in Jira web interface\\n2. Verify credential is for correct account\\n3. Try logging into Jira with the same credentials\\n\\nTime: ${new Date().toLocaleString('en-GB')}`\n    }\n  };\n}\n\n// Extract information\nconst assigneeInfo = allTasks[0]?.fields?.assignee;\nconst projects = [...new Set(allTasks.map(task => task.fields?.project?.key).filter(Boolean))];\nconst statuses = [...new Set(allTasks.map(task => task.fields?.status?.name).filter(Boolean))];\n\n// Categorize tasks\nconst activeTasks = allTasks.filter(task => {\n  const status = task.fields?.status?.name;\n  return ['In Progress', 'To Do', 'Selected for Development', 'Open', 'New'].includes(status);\n});\n\nconst inProgress = allTasks.filter(task => task.fields?.status?.name === 'In Progress');\nconst highPriority = allTasks.filter(task => ['High', 'Highest'].includes(task.fields?.priority?.name));\n\n// Build comprehensive report\nlet message = `✅ JQL ANALYSIS RESULTS\\n\\n`;\nmessage += `📊 FOUND ${allTasks.length} TOTAL TASKS\\n\\n`;\n\n// Assignee info\nif (assigneeInfo) {\n  message += `👤 YOU ARE IDENTIFIED AS:\\n`;\n  message += `   Name: ${assigneeInfo.displayName || 'Not available'}\\n`;\n  if (assigneeInfo.emailAddress) {\n    message += `   Email: ${assigneeInfo.emailAddress}\\n`;\n  }\n  message += `\\n`;\n}\n\n// Project breakdown\nif (projects.length > 0) {\n  message += `🏗️ YOUR PROJECTS (${projects.length}):\\n`;\n  projects.forEach(project => {\n    const projectTasks = allTasks.filter(t => t.fields?.project?.key === project).length;\n    const activeProjectTasks = activeTasks.filter(t => t.fields?.project?.key === project).length;\n    message += `   • ${project}: ${activeProjectTasks}/${projectTasks} active\\n`;\n  });\n  message += `\\n`;\n}\n\n// Task status breakdown\nmessage += `📈 TASK BREAKDOWN:\\n`;\nmessage += `   • Total Tasks: ${allTasks.length}\\n`;\nmessage += `   • Active Tasks: ${activeTasks.length}\\n`;\nmessage += `   • In Progress: ${inProgress.length}\\n`;\nmessage += `   • High Priority: ${highPriority.length}\\n\\n`;\n\n// Current work\nif (inProgress.length > 0) {\n  message += `🚀 CURRENTLY WORKING ON:\\n`;\n  inProgress.slice(0, 3).forEach(task => {\n    message += `   • [${task.key}] ${task.fields?.summary || 'No summary'}\\n`;\n  });\n  message += `\\n`;\n}\n\n// Recommended JQL\nmessage += `💡 RECOMMENDED JQL QUERIES:\\n\\n`;\n\nif (projects.length === 1) {\n  message += `✅ Single Project:\\n`;\n  message += `assignee = currentUser() AND status IN ('In Progress', 'To Do', 'Selected for Development', 'Open')\\n\\n`;\n} else if (projects.length > 1) {\n  message += `✅ Multi-Project (All):\\n`;\n  message += `assignee = currentUser() AND status IN ('In Progress', 'To Do', 'Selected for Development', 'Open')\\n\\n`;\n  \n  message += `✅ Multi-Project (Specific):\\n`;\n  const projectList = projects.join(', ');\n  message += `assignee = currentUser() AND project in (${projectList}) AND status IN ('In Progress', 'To Do')\\n\\n`;\n}\n\n// Alternative formats to try\nif (assigneeInfo?.displayName) {\n  message += `🔧 ALTERNATIVE FORMATS:\\n`;\n  message += `   • assignee = '${assigneeInfo.displayName}'\\n`;\n  if (assigneeInfo.emailAddress) {\n    message += `   • assignee = '${assigneeInfo.emailAddress}'\\n`;\n  }\n  message += `\\n`;\n}\n\nmessage += `⏰ Analysis Time: ${new Date().toLocaleString('en-GB')}`;\n\nreturn {\n  json: {\n    message: message,\n    data: {\n      totalTasks: allTasks.length,\n      activeTasks: activeTasks.length,\n      inProgress: inProgress.length,\n      projects: projects,\n      assignee: assigneeInfo,\n      recommendedJQL: projects.length > 1 \n        ? `assignee = currentUser() AND project in (${projects.join(', ')}) AND status IN ('In Progress', 'To Do', 'Selected for Development', 'Open')`\n        : `assignee = currentUser() AND status IN ('In Progress', 'To Do', 'Selected for Development', 'Open')`\n    }\n  }\n};"
      },
      "id": "analyze-jql",
      "name": "Analyze JQL Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 0]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.telegram.org/bot8483914760:AAEEp8Tccbc5blGme5bZOxI-dr1e6WbRopM/sendMessage",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ JSON.stringify({\n  chat_id: \"589824303\",\n  text: $json.message\n}) }}"
      },
      "id": "send-telegram-report",
      "name": "Send to Telegram",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [600, 0]
    }
  ],
  "connections": {
    "Test JQL Formats": {
      "main": [
        [
          {
            "node": "Test: currentUser()",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test: currentUser()": {
      "main": [
        [
          {
            "node": "Analyze JQL Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze JQL Results": {
      "main": [
        [
          {
            "node": "Send to Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  }
}